O(1)

O(1) describes an algorithm that will always
execute in the same time (or space) regardless
 of the size of the input data set.

bool IsFirstElementNull(IList<string> elements)
{
    return elements[0] == null;
}
O(N)

O(N) describes an algorithm whose performance
 will grow linearly and in direct proportion
 to the size of the input data set.
 The example below also demonstrates how
 Big O favours the worst-case performance
 scenario; a matching string could be found
 during any iteration of the for loop and the
  function would return early,
  but Big O notation will always assume
  the upper limit where the algorithm will
  perform the maximum number of iterations.

bool ContainsValue(IList<string> elements, string value)
{
    foreach (var element in elements)
    {
        if (element == value) return true;
    }

    return false;
}
O(N^2)

O(N2) represents an algorithm whose
performance is directly proportional to
the square of the size of the input data set.
This is common with algorithms that involve
nested iterations over the data set.
Deeper nested iterations will result in O(N3),
 O(N4) etc.

bool ContainsDuplicates(IList<string> elements)
{
 for (var outer = 0; outer < elements.Count; outer++)
    {
 for (var inner = 0; inner < elements.Count; inner++)
        {
  // Don't compare with self
 if (outer == inner) continue;

if (elements[outer] == elements[inner])
return true;
        }
    }

    return false;
}
O(2N)

O(2^N) denotes an algorithm whose growth
doubles
with each additon to the input data set.
The growth curve of an O(2N) function is
exponential - starting off very shallow,
then rising meteorically.
 An example of an O(2N) function is the
 recursive calculation of Fibonacci numbers:

int Fibonacci(int number)
{
    if (number <= 1) return number;

    return Fibonacci(number - 2) +
    Fibonacci(number - 1);
}
./////

+==>The iterative implementation is as follows:

public int iterativeFibonacci(int n)
{
  if ( n == 1 ) return 0;
  else if ( n == 2 ) return 1;
  int i = 0, j = 1, sum = 0;
  for ( ; (n-2) != 0; --n )
  {
    sum = i + j;
    i = j;
    j = sum;
  }
  return sum;
}
////The recursive implementation is as follows :-

  public int recursiveFibonacci(int n)
  {
    if ( n == 1 ) return 0;
    else if ( n == 2 ) return 1;
    return recursiveFibonacci(n-1) + recursiveFibonacci(n-2);
  }
////The memoized implementation is as follows :-

  public int memoizedFibonacci(int n)
  {
    if ( n <= 0 ) return -1;
    else if ( n == 1 ) return 0;
    else if ( n == 2 ) return 1;
    if ( memory[n-1] == 0 )
      memory[n-1] = memoizedFibonacci(n-1);
    if ( memory[n-2] == 0 )
      memory[n-2] = memoizedFibonacci(n-2);
    return memory[n-1]+memory[n-2];
  }


==>The recursive version is not
polynomial time - it's exponential

==>The memoization version will take O(n)
time on first run, since each number is
only computed once. However,
in exchange, it also take O(n)
memory for your current implementation
(the n comes from storing the computed value,
and also for the stack on the first run).
If you run it many times, the time
complexity will become O(M + q)
where M is the max of all input n and q
is the number of queries.
The memory complexity will become O(M),
which comes from the array which holds all
the computed values.

==>The iterative implementation is the best if
you consider one run, as it also runs in O(n),
but uses constant amount of memory O(1) to
compute. For a large number of runs, it will
recompute everything, so its performance may
not be as good as memoization version.