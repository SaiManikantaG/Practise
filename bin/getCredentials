/*jshint esversion: 6 */
"use strict";
const async = require('asyncawait/async');
const await = require('asyncawait/await');
const AWS = require('aws-sdk');
const dotenv = require('dotenv');

const s3 = new AWS.S3({
    region: 'us-east-1'
});

const kms = new AWS.KMS({
    region: 'us-east-1'
});

const getKey = (params) => {
    return new Promise((resolve, reject) => {
        s3.getObject(params, (err, data) => {
            if (err) {
                console.log('failed on s3 getObject ' + params.Bucket + ' ' + params.Key);
                reject(err);
                return;
            }
            resolve(data);
        });
    });
};

const decryptKey = (keyParams) => {
    return new Promise((resolve, reject) => {
        kms.decrypt(keyParams, (err, data) => {
            if (err) {
                console.log('failed on kms decrypt');
                reject(err);
                return;
            }
            resolve(data.Plaintext.toString());
        });
    });
};

module.exports = async((keyBucket, key) => {
    let env = null;
    try {
        const configKey = await(getKey({
            Bucket: keyBucket,
            Key: key
        }));
        const configKeyParams = {
            CiphertextBlob: configKey.Body
        };
        const config = await(decryptKey(configKeyParams));
        env = dotenv.parse(config);
        return env;
    } catch (e) {
        console.log(e);
        throw new Error(e);
    }
});
/*
{
  "Api": {
    "Name": "UTIL$$namepostfix$$",
    "HttpMethod": "GET",
    "Path": "credentials",
    "StageName": "$$apiStage$$",
    "UrlQueryStringParameters": ["Application"]
  },
  "Environment": {
    "Variables": {
      "KEYS_BUCKET": "$$credentialsbucket$$",
      "APPLICATIONS":
        "bookrunner,ebs,sfdc,kquery,bkrdb,mds,dem,dem-ftp,rail,bookrunner-12.4,tm,kochnt,adhocloader",
      "KEYS": "bkr,ebs,sfdc,kquery,bkrdb,mds,dem,dem-ftp,rail,bkr-12.4,tm,kochnt,adhocloader"
    }
  },
  "FunctionName": "GetCredentials$$namepostfix$$",
  "Role": "UTIL$$namepostfix$$",
  "Timeout": 30
}

*/
